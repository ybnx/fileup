// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"fileup/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangePasswdRequest  = user.ChangePasswdRequest
	ChangePasswdResponse = user.ChangePasswdResponse
	EmailLoginRequest    = user.EmailLoginRequest
	EmailLoginResponse   = user.EmailLoginResponse
	PasswdLoginRequest   = user.PasswdLoginRequest
	PasswdLoginResponse  = user.PasswdLoginResponse
	RegisterRequest      = user.RegisterRequest
	RegisterResponse     = user.RegisterResponse
	SendCodeRequest      = user.SendCodeRequest
	SendCodeResponse     = user.SendCodeResponse
	SignoutRequest       = user.SignoutRequest
	SignoutResponse      = user.SignoutResponse
	UserInfoRequest      = user.UserInfoRequest
	UserInfoResponse     = user.UserInfoResponse

	User interface {
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error)
		SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error)
		PasswdLogin(ctx context.Context, in *PasswdLoginRequest, opts ...grpc.CallOption) (*PasswdLoginResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		ChangePasswd(ctx context.Context, in *ChangePasswdRequest, opts ...grpc.CallOption) (*ChangePasswdResponse, error)
		Signout(ctx context.Context, in *SignoutRequest, opts ...grpc.CallOption) (*SignoutResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.EmailLogin(ctx, in, opts...)
}

func (m *defaultUser) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendCode(ctx, in, opts...)
}

func (m *defaultUser) PasswdLogin(ctx context.Context, in *PasswdLoginRequest, opts ...grpc.CallOption) (*PasswdLoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.PasswdLogin(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) ChangePasswd(ctx context.Context, in *ChangePasswdRequest, opts ...grpc.CallOption) (*ChangePasswdResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ChangePasswd(ctx, in, opts...)
}

func (m *defaultUser) Signout(ctx context.Context, in *SignoutRequest, opts ...grpc.CallOption) (*SignoutResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Signout(ctx, in, opts...)
}
